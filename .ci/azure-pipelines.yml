trigger:
  - master

jobs:
  - job: win64

    pool:
      vmImage: "vs2017-win2016"

    strategy:
      matrix:
        "py37-np*":
          python.version: "3.7"
          python.architecture: "x64"
          numpy.version: "latest"

    steps:
      - checkout: self
        submodules: recursive

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: '$(python.architecture)'
        displayName: 'Python $(python.version)'

      - script: |
          mkdir build
          cd build
          cmake -A x64 ..
          cmake --build .
          ls
          ls Debug
          ctest --output-on-failure
        
      # - script: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #     pip install -r test-requirements.txt
      #     python -c "import numpy; print(numpy.__version__)"
      #   displayName: "Install"

      # - script: |
      #     python setup.py build
      #     pytest -vv tests
      #   displayName: "Build and test"

  - job: linux

    pool:
      vmImage: "ubuntu-16.04"

    strategy:
      matrix:
        # "py27-np13":
        #   python.version: "2.7"
        #   numpy.version: "1.13.1"
        # "py27-np*":
        #   python.version: "2.7"
        #   numpy.version: "latest"
        # "py35-np13":
        #   python.version: "3.5"
        #   numpy.version: "1.13.1"
        # "py35-np*":
        #   python.version: "3.5"
        #   numpy.version: "latest"
        # "py36-np*":
        #   python.version: "3.6"
        #   numpy.version: "latest"
        "py37-np*":
          python.version: "3.7"
          numpy.version: "latest"
        # "py38-np*":
        #   python.version: "3.8"
        #   numpy.version: "latest"

    steps:
      - checkout: self
        submodules: recursive

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
        displayName: 'Python $(python.version)'

      - script: |
          sudo apt install -y tree   # build-essential cmake make
          python -m pip install --upgrade pip
          if [ $(numpy.version) = "latest" ]; then
            pip install -r requirements.txt;
          else
            sed 's/numpy>=1.13.1/numpy==$(numpy.version)/' requirements.txt > requirements2.txt;
            pip install -r requirements2.txt;
          fi
          pip install -r test-requirements.txt
          python -c "import numpy; print(numpy.__version__)"
        displayName: "Install"

      - script: |
          python setup.py build
          tree -I pybind11
          cd build/lib.*
          pwd
          cp -a ../../tests .
          tree
          pytest -vv tests
        displayName: "Build and test"
